From 8339b07ea8958a2eabede67728ff5b1780d08f13 Mon Sep 17 00:00:00 2001
From: Andy Nichols <nezticle@gmail.com>
Date: Thu, 19 Jul 2018 18:28:34 +0200
Subject: [PATCH 2/2] Add DiffuseSpecularAlpha QML Material to Phong-cubes
 example

Change-Id: I74d81500193b96383e68857b8e8fd6f614f7e71e
---
 .../phong-cubes/DiffuseSpecularAlphaMaterial.qml   | 147 ++++++
 .../phong-cubes/DiffuseSpecularAlphaShaders.js     | 538 +++++++++++++++++++++
 examples/qt3d/phong-cubes/main.qml                 |  34 +-
 examples/qt3d/phong-cubes/phong-cubes.qrc          |   2 +
 4 files changed, 719 insertions(+), 2 deletions(-)
 create mode 100644 examples/qt3d/phong-cubes/DiffuseSpecularAlphaMaterial.qml
 create mode 100644 examples/qt3d/phong-cubes/DiffuseSpecularAlphaShaders.js

diff --git a/examples/qt3d/phong-cubes/DiffuseSpecularAlphaMaterial.qml b/examples/qt3d/phong-cubes/DiffuseSpecularAlphaMaterial.qml
new file mode 100644
index 000000000..4fc45d90b
--- /dev/null
+++ b/examples/qt3d/phong-cubes/DiffuseSpecularAlphaMaterial.qml
@@ -0,0 +1,147 @@
+import Qt3D.Core 2.0
+import Qt3D.Render 2.0
+
+import "DiffuseSpecularAlphaShaders.js" as ShaderCode
+
+Material {
+    id: root
+
+    property color ambient: Qt.rgba(0.05, 0.05, 0.05, 1.0)
+    property real shininess: 150.0
+    property var diffuse: Texture2D {}
+    property var specular: Texture2D {}
+    property real textureScale: 1.0
+    property real alpha: 0.5
+
+    parameters: [
+        Parameter {
+            name: "ka"
+            value: Qt.vector3d(root.ambient.r, root.ambient.g, root.ambient.b)
+        },
+        Parameter {
+            name: "shininess"
+            value: root.shininess
+        },
+        Parameter {
+            name: "diffuseTexture"
+            value: root.diffuse
+        },
+        Parameter {
+            name: "specularTexture"
+            value: root.specular
+        },
+        Parameter {
+            name: "texCoordScale"
+            value: root.textureScale
+        },
+        Parameter {
+            name: "alpha"
+            value: root.alpha
+        }
+    ]
+
+    effect: Effect {
+
+        FilterKey {
+            id: forward
+            name: "renderingStyle"
+            value: "forward"
+        }
+
+        //! [2]
+        ShaderProgram {
+            id: gl3Shader
+            vertexShaderCode: ShaderCode.getVertGL()
+            fragmentShaderCode: ShaderCode.getFragGL()
+        }
+        ShaderProgram {
+            id: es2Shader
+            vertexShaderCode: ShaderCode.getVertES2()
+            fragmentShaderCode: ShaderCode.getFragES2()
+        }
+
+        techniques: [
+            // OpenGL 3.1
+            Technique {
+                filterKeys: [forward]
+                graphicsApiFilter {
+                    api: GraphicsApiFilter.OpenGL
+                    profile: GraphicsApiFilter.CoreProfile
+                    majorVersion: 3
+                    minorVersion: 1
+                }
+                renderPasses: RenderPass {
+                    shaderProgram: gl3Shader
+                    renderStates: [
+                        NoDepthMask {
+                        },
+                        BlendEquationArguments {
+                            sourceRgb: BlendEquationArguments.SourceAlpha
+                            sourceAlpha: BlendEquationArguments.Zero
+                            destinationRgb: BlendEquationArguments.OneMinusSourceAlpha
+                            destinationAlpha: BlendEquationArguments.One
+                        },
+                        BlendEquation {
+                            blendFunction: BlendEquation.Add
+                        }
+                    ]
+                }
+            },
+
+            // OpenGL 2.0
+            Technique {
+                filterKeys: [forward]
+                graphicsApiFilter {
+                    api: GraphicsApiFilter.OpenGL
+                    profile: GraphicsApiFilter.NoProfile
+                    majorVersion: 2
+                    minorVersion: 0
+                }
+                renderPasses: RenderPass {
+                    shaderProgram: es2Shader
+                    renderStates: [
+                        NoDepthMask {
+                        },
+                        BlendEquationArguments {
+                            sourceRgb: BlendEquationArguments.SourceAlpha
+                            sourceAlpha: BlendEquationArguments.Zero
+                            destinationRgb: BlendEquationArguments.OneMinusSourceAlpha
+                            destinationAlpha: BlendEquationArguments.One
+                        },
+                        BlendEquation {
+                            blendFunction: BlendEquation.Add
+                        }
+                    ]
+                }
+            },
+            // ES 2.0
+            Technique {
+                filterKeys: [forward]
+                graphicsApiFilter {
+                    api: GraphicsApiFilter.OpenGLES
+                    profile: GraphicsApiFilter.CoreProfile
+                    majorVersion: 2
+                    minorVersion: 0
+                }
+                renderPasses: RenderPass {
+                    shaderProgram: es2Shader
+                    renderStates: [
+                        NoDepthMask {
+                        },
+                        BlendEquationArguments {
+                            sourceRgb: BlendEquationArguments.SourceAlpha
+                            sourceAlpha: BlendEquationArguments.Zero
+                            destinationRgb: BlendEquationArguments.OneMinusSourceAlpha
+                            destinationAlpha: BlendEquationArguments.One
+                        },
+                        BlendEquation {
+                            blendFunction: BlendEquation.Add
+                        }
+                    ]
+                }
+            }
+        ]
+    }
+}
+
+
diff --git a/examples/qt3d/phong-cubes/DiffuseSpecularAlphaShaders.js b/examples/qt3d/phong-cubes/DiffuseSpecularAlphaShaders.js
new file mode 100644
index 000000000..1896c3890
--- /dev/null
+++ b/examples/qt3d/phong-cubes/DiffuseSpecularAlphaShaders.js
@@ -0,0 +1,538 @@
+.pragma library
+
+function getVertES2() {
+    return "\
+attribute vec3 vertexPosition;
+attribute vec3 vertexNormal;
+attribute vec2 vertexTexCoord;
+
+varying vec3 worldPosition;
+varying vec3 worldNormal;
+varying vec2 texCoord;
+
+uniform mat4 modelMatrix;
+uniform mat3 modelNormalMatrix;
+uniform mat4 mvp;
+
+uniform float texCoordScale;
+
+void main()
+{
+    texCoord = vertexTexCoord * texCoordScale;
+    worldNormal = normalize( modelNormalMatrix * vertexNormal );
+    worldPosition = vec3( modelMatrix * vec4( vertexPosition, 1.0 ) );
+
+    gl_Position = mvp * vec4( vertexPosition, 1.0 );
+}"
+}
+
+function getFragES2() {
+    return "\
+#define FP highp
+
+uniform FP vec3 ka;            // Ambient reflectivity
+uniform FP float shininess;    // Specular shininess factor
+uniform FP float alpha;
+
+uniform FP vec3 eyePosition;
+
+uniform sampler2D diffuseTexture;
+uniform sampler2D specularTexture;
+
+varying FP vec3 worldPosition;
+varying FP vec3 worldNormal;
+varying FP vec2 texCoord;
+
+const int MAX_LIGHTS = 8;
+const int TYPE_POINT = 0;
+const int TYPE_DIRECTIONAL = 1;
+const int TYPE_SPOT = 2;
+struct Light {
+    int type;
+    FP vec3 position;
+    FP vec3 color;
+    FP float intensity;
+    FP vec3 direction;
+    FP vec3 attenuation;
+    FP float cutOffAngle;
+};
+uniform Light lights[MAX_LIGHTS];
+uniform int lightCount;
+
+void adsModelNormalMapped(const in FP vec3 vpos, const in FP vec3 vnormal, const in FP vec3 eye, const in FP float shininess,
+                          const in FP mat3 tangentMatrix,
+                          out FP vec3 diffuseColor, out FP vec3 specularColor)
+{
+    diffuseColor = vec3(0.0);
+    specularColor = vec3(0.0);
+
+    FP vec3 snormal = normalize( vec3( tangentMatrix[0][2], tangentMatrix[1][2], tangentMatrix[2][2] ) );
+
+    FP vec3 n = normalize( vnormal );
+
+    FP vec3 s, ts;
+    Light light;
+    for (int i = 0; i < MAX_LIGHTS; ++i) {
+        if (i >= lightCount) // Make brcm happy with the for loop
+            break;
+        if (i == 0)
+            light = lights[0];
+        else if (i == 1)
+            light = lights[1];
+        else if (i == 2)
+            light = lights[2];
+        else if (i == 3)
+            light = lights[3];
+        else if (i == 4)
+            light = lights[4];
+        else if (i == 5)
+            light = lights[5];
+        else if (i == 6)
+            light = lights[6];
+        else if (i == 7)
+            light = lights[7];
+
+        FP float att = 1.0;
+        if ( light.type != TYPE_DIRECTIONAL ) {
+            s = light.position - vpos;
+            if ( dot(snormal, s) < 0.0 )
+                att = 0.0;
+            else {
+                ts = normalize( tangentMatrix * s );
+                if (length( light.attenuation ) != 0.0) {
+                    FP float dist = length(s);
+                    att = 1.0 / (light.attenuation.x + light.attenuation.y * dist + light.attenuation.z * dist * dist);
+                }
+                s = normalize( s );
+                if ( light.type == TYPE_SPOT ) {
+                    if ( degrees(acos(dot(-s, normalize(light.direction))) ) > light.cutOffAngle)
+                        att = 0.0;
+                }
+            }
+        } else {
+            if ( dot(snormal, -light.direction) > 0.0 )
+                s = normalize( tangentMatrix * -light.direction );
+            else
+                att = 0.0;
+        }
+
+        FP float diffuse = max( dot( ts, n ), 0.0 );
+
+        FP float specular = 0.0;
+        if (diffuse > 0.0 && shininess > 0.0 && att > 0.0) {
+            FP vec3 r = reflect( -ts, n );
+            FP vec3 v = normalize( tangentMatrix * ( eye - vpos ) );
+            FP float normFactor = ( shininess + 2.0 ) / 2.0;
+            specular = normFactor * pow( max( dot( r, v ), 0.0 ), shininess );
+        }
+
+        diffuseColor += att * light.intensity * diffuse * light.color;
+        specularColor += att * light.intensity * specular * light.color;
+    }
+}
+
+void adsModel(const in FP vec3 vpos, const in FP vec3 vnormal, const in FP vec3 eye, const in FP float shininess,
+              out FP vec3 diffuseColor, out FP vec3 specularColor)
+{
+    diffuseColor = vec3(0.0);
+    specularColor = vec3(0.0);
+
+    FP vec3 n = normalize( vnormal );
+
+    FP vec3 s;
+    Light light;
+    for (int i = 0; i < MAX_LIGHTS; ++i) {
+        if (i >= lightCount) // Make brcm happy with the for loop
+            break;
+        if (i == 0)
+            light = lights[0];
+        else if (i == 1)
+            light = lights[1];
+        else if (i == 2)
+            light = lights[2];
+        else if (i == 3)
+            light = lights[3];
+        else if (i == 4)
+            light = lights[4];
+        else if (i == 5)
+            light = lights[5];
+        else if (i == 6)
+            light = lights[6];
+        else if (i == 7)
+            light = lights[7];
+
+        FP float att = 1.0;
+        if ( light.type != TYPE_DIRECTIONAL ) {
+            s = light.position - vpos;
+            if (length( light.attenuation ) != 0.0) {
+                FP float dist = length(s);
+                att = 1.0 / (light.attenuation.x + light.attenuation.y * dist + light.attenuation.z * dist * dist);
+            }
+            s = normalize( s );
+            if ( light.type == TYPE_SPOT ) {
+                if ( degrees(acos(dot(-s, normalize(light.direction))) ) > light.cutOffAngle)
+                    att = 0.0;
+            }
+        } else {
+            s = normalize( -light.direction );
+        }
+
+        FP float diffuse = max( dot( s, n ), 0.0 );
+
+        FP float specular = 0.0;
+        if (diffuse > 0.0 && shininess > 0.0 && att > 0.0) {
+            FP vec3 r = reflect( -s, n );
+            FP vec3 v = normalize( eye - vpos );
+            FP float normFactor = ( shininess + 2.0 ) / 2.0;
+            specular = normFactor * pow( max( dot( r, v ), 0.0 ), shininess );
+        }
+
+        diffuseColor += att * light.intensity * diffuse * light.color;
+        specularColor += att * light.intensity * specular * light.color;
+    }
+}
+
+void adModel(const in FP vec3 vpos, const in FP vec3 vnormal, out FP vec3 diffuseColor)
+{
+    diffuseColor = vec3(0.0);
+
+    FP vec3 n = normalize( vnormal );
+
+    FP vec3 s;
+    Light light;
+    for (int i = 0; i < MAX_LIGHTS; ++i) {
+        if (i >= lightCount) // Make brcm happy with the for loop
+            break;
+        if (i == 0)
+            light = lights[0];
+        else if (i == 1)
+            light = lights[1];
+        else if (i == 2)
+            light = lights[2];
+        else if (i == 3)
+            light = lights[3];
+        else if (i == 4)
+            light = lights[4];
+        else if (i == 5)
+            light = lights[5];
+        else if (i == 6)
+            light = lights[6];
+        else if (i == 7)
+            light = lights[7];
+
+        FP float att = 1.0;
+        if ( light.type != TYPE_DIRECTIONAL ) {
+            s = light.position - vpos;
+            if (length( light.attenuation ) != 0.0) {
+                FP float dist = length(s);
+                att = 1.0 / (light.attenuation.x + light.attenuation.y * dist + light.attenuation.z * dist * dist);
+            }
+            s = normalize( s );
+            if ( light.type == TYPE_SPOT ) {
+                if ( degrees(acos(dot(-s, normalize(light.direction))) ) > light.cutOffAngle)
+                    att = 0.0;
+            }
+        } else {
+            s = normalize( -light.direction );
+        }
+
+        FP float diffuse = max( dot( s, n ), 0.0 );
+
+        diffuseColor += att * light.intensity * diffuse * light.color;
+    }
+}
+
+void main()
+{
+    FP vec3 diffuseTextureColor = texture2D( diffuseTexture, texCoord ).rgb;
+    FP vec3 specularTextureColor = texture2D( specularTexture, texCoord ).rgb;
+
+    FP vec3 diffuseColor, specularColor;
+    adsModel(worldPosition, worldNormal, eyePosition, shininess, diffuseColor, specularColor);
+
+    gl_FragColor = vec4( diffuseTextureColor * ( ka + diffuseColor ) + specularTextureColor * specularColor, alpha );
+}"
+
+}
+
+function getVertGL() {
+    return "\
+#version 150 core
+
+in vec3 vertexPosition;
+in vec3 vertexNormal;
+in vec2 vertexTexCoord;
+
+out vec3 worldPosition;
+out vec3 worldNormal;
+out vec2 texCoord;
+
+uniform mat4 modelMatrix;
+uniform mat3 modelNormalMatrix;
+uniform mat4 mvp;
+
+uniform float texCoordScale;
+
+void main()
+{
+    texCoord = vertexTexCoord * texCoordScale;
+    worldNormal = normalize( modelNormalMatrix * vertexNormal );
+    worldPosition = vec3( modelMatrix * vec4( vertexPosition, 1.0 ) );
+
+    gl_Position = mvp * vec4( vertexPosition, 1.0 );
+}"
+}
+
+function getFragGL() {
+    return "\
+#version 150 core
+
+uniform vec3 ka;            // Ambient reflectivity
+uniform float shininess;    // Specular shininess factor
+uniform float alpha;
+
+uniform vec3 eyePosition;
+
+uniform sampler2D diffuseTexture;
+uniform sampler2D specularTexture;
+
+in vec3 worldPosition;
+in vec3 worldNormal;
+in vec2 texCoord;
+
+out vec4 fragColor;
+
+const int MAX_LIGHTS = 8;
+const int TYPE_POINT = 0;
+const int TYPE_DIRECTIONAL = 1;
+const int TYPE_SPOT = 2;
+struct Light {
+    int type;
+    vec3 position;
+    vec3 color;
+    float intensity;
+    vec3 direction;
+    float constantAttenuation;
+    float linearAttenuation;
+    float quadraticAttenuation;
+    float cutOffAngle;
+};
+uniform Light lights[MAX_LIGHTS];
+uniform int lightCount;
+
+// Pre-convolved environment maps
+struct EnvironmentLight {
+    samplerCube irradiance; // For diffuse contribution
+    samplerCube specular; // For specular contribution
+};
+uniform EnvironmentLight envLight;
+uniform int envLightCount = 0;
+
+void adsModelNormalMapped(const in vec3 worldPos,
+                          const in vec3 tsNormal,
+                          const in vec3 worldEye,
+                          const in float shininess,
+                          const in mat3 tangentMatrix,
+                          out vec3 diffuseColor,
+                          out vec3 specularColor)
+{
+    diffuseColor = vec3(0.0);
+    specularColor = vec3(0.0);
+
+    // We perform all work in tangent space, so we convert quantities from world space
+    vec3 tsPos = tangentMatrix * worldPos;
+    vec3 n = normalize(tsNormal);
+    vec3 v = normalize(tangentMatrix * (worldEye - worldPos));
+    vec3 s = vec3(0.0);
+
+    for (int i = 0; i < lightCount; ++i) {
+        float att = 1.0;
+        float sDotN = 0.0;
+
+        if (lights[i].type != TYPE_DIRECTIONAL) {
+            // Point and Spot lights
+
+            // Transform the light position from world to tangent space
+            vec3 tsLightPos = tangentMatrix * lights[i].position;
+            vec3 sUnnormalized = tsLightPos - tsPos;
+            s = normalize(sUnnormalized); // Light direction in tangent space
+
+            // Calculate the attenuation factor
+            sDotN = dot(s, n);
+            if (sDotN > 0.0) {
+                if (lights[i].constantAttenuation != 0.0
+                 || lights[i].linearAttenuation != 0.0
+                 || lights[i].quadraticAttenuation != 0.0) {
+                    float dist = length(sUnnormalized);
+                    att = 1.0 / (lights[i].constantAttenuation +
+                                 lights[i].linearAttenuation * dist +
+                                 lights[i].quadraticAttenuation * dist * dist);
+                }
+
+                // The light direction is in world space, convert to tangent space
+                if (lights[i].type == TYPE_SPOT) {
+                    // Check if fragment is inside or outside of the spot light cone
+                    vec3 tsLightDirection = tangentMatrix * lights[i].direction;
+                    if (degrees(acos(dot(-s, tsLightDirection))) > lights[i].cutOffAngle)
+                        sDotN = 0.0;
+                }
+            }
+        } else {
+            // Directional lights
+            // The light direction is in world space, convert to tangent space
+            s = normalize(tangentMatrix * -lights[i].direction);
+            sDotN = dot(s, n);
+        }
+
+        // Calculate the diffuse factor
+        float diffuse = max(sDotN, 0.0);
+
+        // Calculate the specular factor
+        float specular = 0.0;
+        if (diffuse > 0.0 && shininess > 0.0) {
+            float normFactor = (shininess + 2.0) / 2.0;
+            vec3 r = reflect(-s, n);   // Reflection direction in tangent space
+            specular = normFactor * pow(max(dot(r, v), 0.0), shininess);
+        }
+
+        // Accumulate the diffuse and specular contributions
+        diffuseColor += att * lights[i].intensity * diffuse * lights[i].color;
+        specularColor += att * lights[i].intensity * specular * lights[i].color;
+    }
+}
+
+void adsModel(const in vec3 worldPos,
+              const in vec3 worldNormal,
+              const in vec3 worldEye,
+              const in float shininess,
+              out vec3 diffuseColor,
+              out vec3 specularColor)
+{
+    diffuseColor = vec3(0.0);
+    specularColor = vec3(0.0);
+
+    // We perform all work in world space
+    vec3 n = normalize(worldNormal);
+    vec3 v = normalize(worldEye - worldPos);
+    vec3 s = vec3(0.0);
+
+    for (int i = 0; i < lightCount; ++i) {
+        float att = 1.0;
+        float sDotN = 0.0;
+
+        if (lights[i].type != TYPE_DIRECTIONAL) {
+            // Point and Spot lights
+
+            // Light position is already in world space
+            vec3 sUnnormalized = lights[i].position - worldPos;
+            s = normalize(sUnnormalized); // Light direction
+
+            // Calculate the attenuation factor
+            sDotN = dot(s, n);
+            if (sDotN > 0.0) {
+                if (lights[i].constantAttenuation != 0.0
+                 || lights[i].linearAttenuation != 0.0
+                 || lights[i].quadraticAttenuation != 0.0) {
+                    float dist = length(sUnnormalized);
+                    att = 1.0 / (lights[i].constantAttenuation +
+                                 lights[i].linearAttenuation * dist +
+                                 lights[i].quadraticAttenuation * dist * dist);
+                }
+
+                // The light direction is in world space already
+                if (lights[i].type == TYPE_SPOT) {
+                    // Check if fragment is inside or outside of the spot light cone
+                    if (degrees(acos(dot(-s, lights[i].direction))) > lights[i].cutOffAngle)
+                        sDotN = 0.0;
+                }
+            }
+        } else {
+            // Directional lights
+            // The light direction is in world space already
+            s = normalize(-lights[i].direction);
+            sDotN = dot(s, n);
+        }
+
+        // Calculate the diffuse factor
+        float diffuse = max(sDotN, 0.0);
+
+        // Calculate the specular factor
+        float specular = 0.0;
+        if (diffuse > 0.0 && shininess > 0.0) {
+            float normFactor = (shininess + 2.0) / 2.0;
+            vec3 r = reflect(-s, n);   // Reflection direction in world space
+            specular = normFactor * pow(max(dot(r, v), 0.0), shininess);
+        }
+
+        // Accumulate the diffuse and specular contributions
+        diffuseColor += att * lights[i].intensity * diffuse * lights[i].color;
+        specularColor += att * lights[i].intensity * specular * lights[i].color;
+    }
+}
+
+void adModel(const in vec3 worldPos,
+             const in vec3 worldNormal,
+             out vec3 diffuseColor)
+{
+    diffuseColor = vec3(0.0);
+
+    // We perform all work in world space
+    vec3 n = normalize(worldNormal);
+    vec3 s = vec3(0.0);
+
+    for (int i = 0; i < lightCount; ++i) {
+        float att = 1.0;
+        float sDotN = 0.0;
+
+        if (lights[i].type != TYPE_DIRECTIONAL) {
+            // Point and Spot lights
+
+            // Light position is already in world space
+            vec3 sUnnormalized = lights[i].position - worldPos;
+            s = normalize(sUnnormalized); // Light direction
+
+            // Calculate the attenuation factor
+            sDotN = dot(s, n);
+            if (sDotN > 0.0) {
+                if (lights[i].constantAttenuation != 0.0
+                 || lights[i].linearAttenuation != 0.0
+                 || lights[i].quadraticAttenuation != 0.0) {
+                    float dist = length(sUnnormalized);
+                    att = 1.0 / (lights[i].constantAttenuation +
+                                 lights[i].linearAttenuation * dist +
+                                 lights[i].quadraticAttenuation * dist * dist);
+                }
+
+                // The light direction is in world space already
+                if (lights[i].type == TYPE_SPOT) {
+                    // Check if fragment is inside or outside of the spot light cone
+                    if (degrees(acos(dot(-s, lights[i].direction))) > lights[i].cutOffAngle)
+                        sDotN = 0.0;
+                }
+            }
+        } else {
+            // Directional lights
+            // The light direction is in world space already
+            s = normalize(-lights[i].direction);
+            sDotN = dot(s, n);
+        }
+
+        // Calculate the diffuse factor
+        float diffuse = max(sDotN, 0.0);
+
+        // Accumulate the diffuse contributions
+        diffuseColor += att * lights[i].intensity * diffuse * lights[i].color;
+    }
+}
+
+void main()
+{
+    vec3 diffuseTextureColor = texture( diffuseTexture, texCoord ).rgb;
+    vec3 specularTextureColor = texture( specularTexture, texCoord ).rgb;
+
+    vec3 diffuseColor, specularColor;
+    adsModel(worldPosition, worldNormal, eyePosition, shininess, diffuseColor, specularColor);
+
+    fragColor = vec4( diffuseTextureColor * ( ka + diffuseColor ) + specularTextureColor * specularColor, alpha );
+}"
+}
diff --git a/examples/qt3d/phong-cubes/main.qml b/examples/qt3d/phong-cubes/main.qml
index 311e65a63..ccea396df 100644
--- a/examples/qt3d/phong-cubes/main.qml
+++ b/examples/qt3d/phong-cubes/main.qml
@@ -90,9 +90,24 @@ Entity {
 
     CubeEntity {
         position: Qt.vector3d(0, 1, 0)
-        material: DiffuseSpecularMaterial {
+        material: DiffuseSpecularAlphaMaterial {
+            id: materialWithAlpha
             diffuse: TextureLoader { source: "qrc:/assets/textures/pattern_09/diffuse.webp" }
+            specular: TextureLoader { source: "qrc:/assets/textures/pattern_09/specular.webp" }
+
+            NumberAnimation {
+                target: materialWithAlpha
+                property: "alpha"
+                duration: 10000
+                easing.type: Easing.InOutQuad
+                from: 0.0
+                to: 1.0
+                running: true
+                loops: Animation.Infinite
+            }
         }
+
+
     }
 
     CubeEntity {
@@ -104,10 +119,25 @@ Entity {
     }
 
     CubeEntity {
+        id: cube7
         position: Qt.vector3d(-1, 0, 0)
+        property real alpha: 1.0
+
+        NumberAnimation {
+            target: cube7
+            property: "alpha"
+            duration: 10000
+            easing.type: Easing.InOutQuad
+            from: 0.0
+            to: 1.0
+            running: true
+            loops: Animation.Infinite
+        }
+
         material: DiffuseSpecularMaterial {
+            id: diffuseSpecular
             alphaBlending: true
-            diffuse: Qt.rgba(0.7, 0.7, 0.7, 0.5)
+            diffuse: Qt.rgba(0.7, 0.7, 0.7, cube7.alpha)
         }
     }
 
diff --git a/examples/qt3d/phong-cubes/phong-cubes.qrc b/examples/qt3d/phong-cubes/phong-cubes.qrc
index 84cec1121..9db138f4e 100644
--- a/examples/qt3d/phong-cubes/phong-cubes.qrc
+++ b/examples/qt3d/phong-cubes/phong-cubes.qrc
@@ -2,5 +2,7 @@
     <qresource prefix="/">
         <file>main.qml</file>
         <file>CubeEntity.qml</file>
+        <file>DiffuseSpecularAlphaMaterial.qml</file>
+        <file>DiffuseSpecularAlphaShaders.js</file>
     </qresource>
 </RCC>
-- 
2.12.2.windows.1

